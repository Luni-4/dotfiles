import logging
import os
import subprocess
import sys
from pathlib import Path
from typing import Iterable

dotfiles_path = Path(__file__).parent
l = logging.getLogger(__name__)


def is_package(path: Path) -> bool:
    """Filter out paths that don't represent packages."""
    if not path.is_dir():
        return False
    elif path.name.startswith("."):
        return False
    return True


def stow(
    package_names: Iterable[str],
    dir: Path = dotfiles_path,
    target: Path = Path.home(),
    args: Iterable[str] = (),
) -> int:

    cmd = [
        "stow",
        f"--dir={dir!s}",
        f"--target={target!s}",
        "--no-folding",
        f"--verbose={1 if l.getEffectiveLevel() >= logging.INFO else 2}",
        *args,
        *package_names,
    ]

    l.info(f"Calling {cmd}")
    return subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)


def main():
    # -n, --no
    # --adopt
    # -v, --verbose
    # -S, --stow
    # -R, --restow
    # -D, --delete
    l.addHandler(logging.StreamHandler())
    l.setLevel(logging.DEBUG)
    s = "Installing"

    additional_stow_args = []
    exclude_packages = set()
    provided_package_names = set()
    for arg in sys.argv[1:]:
        if arg.startswith("-"):
            additional_stow_args.append(arg)
        else:
            provided_package_names.add(arg)

    available_package_paths = {
        path for path in dotfiles_path.glob("*") if is_package(path)
    }
    available_package_names = {path.name for path in available_package_paths}
    package_names = provided_package_names & available_package_names

    if "-D" in additional_stow_args:
        s = "Uninstalling"

    if not package_names or len(package_names) == len(available_package_names):
        package_names = available_package_names - exclude_packages
        l.info(f"{s} all packages")
    else:
        l.info(f"{s} {len(package_names)} packages")

    l.debug(f"Packages: {', '.join(sorted(package_names))}")

    result = stow(package_names, args=additional_stow_args)

    return result


if __name__ == "__main__":
    sys.exit(main())
